# -*- coding: utf-8 -*-
"""GRIP_Task.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r7DqC0WwN11wo8Zu-4WkZzKmFrN_4uVE

# Author:Ahmed Khaled Hemida
# Task 1: Predict the percentage of marks that a student is expected to score based upon the number of hours they studied
"""

# imports libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Reading data
url = "http://bit.ly/w-data"
data = pd.read_csv(url)
data

x=data['Hours'].values
y=data['Scores'].values
# x
# y

# Visualization
data.plot(x='Hours', y='Scores', style='o')
plt.title("Data Distrbution")
# plt.scatter(x,y)
plt.xlabel("Hours")
plt.ylabel("Score")
plt.show()

X = data.iloc[:, :-1].values
y = data.iloc[:, 1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,
                            test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(x, y)
plt.plot(x, line,color="red");
plt.show()

# Making Predictions
# Testing data - In Hours
print(X_test)
y_pred = regressor.predict(X_test)

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
df

import numpy as np

hours = 9.25
hours_2d = np.array(hours).reshape(1, -1)

own_pred = regressor.predict(hours_2d)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0]))

from sklearn import metrics
print('Mean Absolute Error:',
      metrics.mean_absolute_error(y_test, y_pred))